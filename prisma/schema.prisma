generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Employee {
    id         String  @id @default(cuid())
    firstName  String  @map("first_name")
    lastName   String  @map("last_name")
    gender     String
    createAt   DateTime @default(now()) @map("create_at")
    updateAt   DateTime @default(now()) @updatedAt @map("update_at")
    cards      Card[]
}

model Card {
    id         String  @id @default(cuid())
    cardNumber String  @map("card_number")
    cardType   String  @map("card_type")
    isActive   Boolean @default(true)
    createAt   DateTime @default(now()) @map("create_at")
    updateAt   DateTime @default(now()) @updatedAt @map("update_at")
    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id])
}